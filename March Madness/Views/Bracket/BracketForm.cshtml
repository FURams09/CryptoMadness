@model March_Madness.Models.ViewModels.BracketViewModel
@{
	ViewBag.Title = "BracketForm";
}

<h2>Bracket Form</h2>

<div class="row">
	<div class="form-group col col-sm-3">
		<select id="bracket-selector" class="custom-select">
			<option value=0>New Bracket</option>
			@foreach (var bracket in Model.UserBrackets)
			{
				<option value=@bracket.Id @(bracket.Id == Model.TournamentId ? $"selected='selected'" : "")>@bracket.Name</option>
			}
		</select>

	</div>
	<div class="form-group col">
		<input id="bracket-name" class="form-control" placeholder="New Bracket Name" value="@Model.TournamentEntryName" />
	</div>
</div>
<div class="row">
	<div style="z-index:99999;" class="form-group">
		<button class="btn btn-primary btn-success" id="submitBracket">Save Bracket</button>
	</div>

	<div class="form-group col">
		<input id="bracket-owner-address" class="form-control" value="@Model.EntryAddress" disabled="disabled"  />
	</div>
</div>





<div class="col-md-11">
	<div id="crypto-madness" style="height: 260px;"></div>
</div>

@Scripts.Render("~/bundles/bracketScripts")
@section scripts
{
	<script type="text/javascript" src="~/Scripts/jquery.bracket.js"></script>
	<link rel="stylesheet" type="text/css" href="~/Content/jquery.bracket.css" />
	<script type="text/javascript">


		var bracketStore = {
			isNewBracketShown: true,
			newBracketNamet: '',
			newBracketData: [],
			allBrackets: {},
			teamArray: @Html.Raw(Model.TournamentTeams)
		};
		$(function () {


			setTournamentBracket(@Model.TournamentId);


			$('#submitBracket').on('click', function () {
				//***REMOVE TRUE BEFORE GOING LIVE PL
				if (true || $('.highlightWinner').length > 0 && $('.highlightWinner .highlight').length === 0) {
					var results = $('#crypto-madness').bracket('data').results;

					var entry = {
						UserBrackets: null,
						TournamentId: $('#bracket-selector').val(),
						TournamentEntryName: $('#bracket-name').val(),
						BracketPicks: results[0],
						TournamentTeams: null
					}

					$.ajax({
						url: '/api/bracket/save',
						method: 'POST',
						data: entry,
						success: function () {
							alert('successfully added bracket');
						},
						failure: function (a, b, c, d) {
							alert('failed');
							console.log(a, b, c, d);
						}
					})
				} else {
					alert('All games must be selected.');
				}
			});

			$('#bracket-selector').on('change', function () {
				var $this = $(this);
				if ($(this).val() == 0) {
					//repopulate with last new bracket state. 
					$('#bracket-name').val('');
				} else {
					$('#bracket-name').val($(this).children(':selected').text());
				}
				setTournamentBracket($this.val());

				if (bracketSave.isNewBracketShown) {
					//store what state the bracket currently is in

				}
							
			})

		})

		function setTournamentBracket(bracketId) {
			if (bracketId == 0) {
				fillBracket([]);
			} else {
				var storedBracket = bracketStore.allBrackets[bracketId]
				if (storedBracket) {
					fillBracket( storedBracket);
				} else {
					getBracketFromServer(bracketId)
					.then(function(res) {
						fillBracket(res);
						bracketStore.allBrackets[bracketId] = { bracket: res.bracket, address: res.address };
					})
					.catch(function (err) {
						console.log(err);
					})
				}
			}
			
		}

		function getBracketFromServer(bracketId) {
			return new Promise(function (resolve, reject) {
				$.ajax({
					url: '/api/bracket/' + bracketId,
					method: 'GET',
					success: function (res) {
						resolve(res)

					},
					failure: function (a, b, c) {
						reject(a);
					}
				});
			});
		}

		function fillBracket(results) {
			data = {
				teams: bracketStore.teamArray,
				results: results.bracket
			}
			$('#bracket-owner-address').val(results.address);
			$('#crypto-madness')
				.bracket({
					init: data, /* data to initialize the bracket with */
					skipConsolationRound: true,
					save: bracketSave,
					disableToolbar: true,
					disableTeamEdit: true,
					teamWidth: 150,
					scoreWidth: 0,
					showFinalBubble: false
				});
		}
	</script>

}


